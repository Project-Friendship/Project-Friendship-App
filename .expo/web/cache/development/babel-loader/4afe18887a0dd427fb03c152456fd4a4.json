{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport { StatusBar } from 'expo-status-bar';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport 'react-native-get-random-values';\nimport { NIL as NIL_UUID } from 'uuid';\nimport Home from \"./Home\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar _require = require('uuid'),\n    uuidv4 = _require.v4;\n\nexport default function LoginScreen(props) {\n  var url = 'http://192.168.1.214:3001';\n  var formContentType = \"application/x-www-form-urlencoded;charset=UTF-8\";\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(NIL_UUID),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sessionID = _useState4[0],\n      setSessionID = _useState4[1];\n\n  var handlePress = function handlePress(op) {\n    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (method != '') params.method = method;\n    fetch(url + '/' + op, params).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      console.log(\"response text: \" + responseText);\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  var handleLogin = function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setSessionID(uuidv4()));\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(console.log(sessionID));\n\n          case 4:\n            if (!(sessionID === \"\")) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(setSessionID(uuidv4()));\n\n          case 7:\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(handlePress('sessions/delete', 'DELETE', {\n              headers: {\n                \"Content-type\": formContentType\n              },\n              body: \"sid=\" + sessionID + \"&email=\" + username\n            }));\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(handlePress('sessions/add', 'POST', {\n              headers: {\n                \"Content-type\": formContentType\n              },\n              body: \"sid=\" + sessionID + \"&email=\" + username\n            }));\n\n          case 11:\n            props.navigation.navigate('Home', {\n              sid: sessionID\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Log in to the QR code matching demo!\"\n    }), _jsx(TextInput, {\n      style: {\n        width: '75%',\n        borderWidth: 1,\n        padding: 10,\n        margin: 10\n      },\n      placeholder: \"Enter username\",\n      onChangeText: function onChangeText(value) {\n        return setUsername(value);\n      }\n    }), _jsx(Button, {\n      title: \"Login\",\n      onPress: function onPress() {\n        return handleLogin();\n      }\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    paddingTop: 100\n  }\n});","map":{"version":3,"sources":["C:/Users/Areeba/Desktop/2022/pf-components/BarcodeRelationship/BarcodeRS/lib/LoginScreen.js"],"names":["React","useEffect","useState","StatusBar","NIL","NIL_UUID","Home","require","uuidv4","v4","LoginScreen","props","url","formContentType","username","setUsername","sessionID","setSessionID","handlePress","op","method","params","fetch","then","response","text","responseText","console","log","catch","error","handleLogin","headers","body","navigation","navigate","sid","styles","container","width","borderWidth","padding","margin","value","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { Image, TextInput, Button, StyleSheet, Text, View } from 'react-native';\r\nimport 'react-native-get-random-values';\r\nimport { NIL as NIL_UUID } from 'uuid';\r\nimport Home from './Home'\r\n\r\nconst { v4: uuidv4 } = require('uuid');\r\n\r\nexport default function LoginScreen(props) {\r\n    const url='http://192.168.1.214:3001';  \r\n    const formContentType = \"application/x-www-form-urlencoded;charset=UTF-8\";\r\n\r\n    const [username, setUsername] = useState(\"\"); \r\n    const [sessionID, setSessionID] = useState(NIL_UUID);\r\n\r\n    const handlePress = (op, method = '', params = {}) => {\r\n      if (method != '')\r\n          params.method = method;\r\n      fetch(url + '/'+op, params)\r\n          .then((response) => response.text())\r\n          .then((responseText) => {\r\n              console.log(`response text: ${responseText}`);\r\n          })\r\n          .catch((error) => {\r\n              console.error(error);\r\n          });\r\n  }\r\n\r\n    const handleLogin = async () => {\r\n      await setSessionID(uuidv4());\r\n      await console.log(sessionID);\r\n      if (sessionID === \"\") {\r\n        await setSessionID(uuidv4());\r\n      }\r\n      await handlePress('sessions/delete', 'DELETE', { // adds into votes. \r\n          headers: {\"Content-type\": formContentType}, body: `sid=${sessionID}&email=${username}`});\r\n      await handlePress('sessions/add', 'POST', { // adds into votes. \r\n        headers: {\"Content-type\": formContentType}, body: `sid=${sessionID}&email=${username}`});    \r\n      //navigate to home.js\r\n      props.navigation.navigate('Home', { sid: sessionID });\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n        <Text>Log in to the QR code matching demo!</Text>\r\n        <TextInput style={{width: '75%', borderWidth:1, padding: 10, margin: 10}} \r\n            placeholder=\"Enter username\"\r\n            onChangeText={(value) => setUsername(value)}/>\r\n            <Button title=\"Login\" onPress={() => handleLogin()}/>\r\n        <StatusBar style=\"auto\" />\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    paddingTop: 100,\r\n    // justifyContent: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}