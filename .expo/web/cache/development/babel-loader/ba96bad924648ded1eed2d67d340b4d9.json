{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport { StatusBar } from 'expo-status-bar';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Home(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var url = 'http://192.168.1.214:3001';\n  var formContentType = \"application/x-www-form-urlencoded;charset=UTF-8\";\n\n  var apiCall = function apiCall(op) {\n    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (method != '') params.method = method;\n    console.log('apiCall ' + method + ' ' + url + '/' + op);\n    fetch(url + '/' + op, params).then(function (response) {\n      return response.text();\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  var imageUrl = \"https://i.imgur.com/fHyEMsl.jpg\";\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      img = _useState2[0],\n      setImg = _useState2[1];\n\n  var _useState3 = useState(\"null\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      qrInput = _useState4[0],\n      setQRInput = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalVisible = _useState6[0],\n      setModalVisible = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      modalVisibleScanner = _useState8[0],\n      setModalVisibleScanner = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      hasPermission = _useState10[0],\n      setHasPermission = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      scanned = _useState12[0],\n      setScanned = _useState12[1];\n\n  var fetchImage = function _callee() {\n    var res, imageBlob, imageObjectURL;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(imageUrl));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(res.blob());\n\n          case 5:\n            imageBlob = _context.sent;\n            imageObjectURL = URL.createObjectURL(imageBlob);\n            setImg(imageObjectURL);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var scanQRCode = function _callee3() {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            (function _callee2() {\n              var _await$BarCodeScanner, status;\n\n              return _regeneratorRuntime.async(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n                    case 2:\n                      _await$BarCodeScanner = _context2.sent;\n                      status = _await$BarCodeScanner.status;\n                      setHasPermission(status === 'granted');\n\n                    case 5:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            })();\n\n            setModalVisibleScanner(true);\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleBarCodeScanned = function _callee4(_ref2) {\n    var type, data;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            type = _ref2.type, data = _ref2.data;\n            setScanned(true);\n            alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchImage();\n  }, []);\n\n  var generateQRCode = function _callee5() {\n    var sid, parametersJson, parameters, img_resp;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            sid = route.params.sid;\n            console.log(\"recieved sid: \" + sid);\n            parametersJson = {\n              \"size\": 250,\n              \"backgroundColor\": \"38-38-38\",\n              \"qrColor\": \"255-255-255\",\n              \"padding\": 2,\n              \"data\": \"\" + imageUrl\n            };\n            parametersJson.data = sid;\n            parameters = \"size=\" + parametersJson.size + \"&bgcolor=\" + parametersJson.backgroundColor + \"&color=\" + parametersJson.qrColor + \"&qzone=\" + parametersJson.padding + \"&data=\" + parametersJson.data;\n            img_resp = \"https://api.qrserver.com/v1/create-qr-code/?\" + parameters;\n            _context5.next = 8;\n            return _regeneratorRuntime.awrap(setQRInput(img_resp));\n\n          case 8:\n            setModalVisible(true);\n\n          case 9:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisible(!modalVisible);\n      },\n      children: [_jsx(View, {\n        style: styles.modalView,\n        children: _jsx(Image, {\n          style: {\n            width: '100%',\n            height: '100%'\n          },\n          source: {\n            uri: qrInput\n          }\n        })\n      }), _jsx(Button, {\n        title: \"close\",\n        onPress: function onPress() {\n          return setModalVisible(false);\n        }\n      })]\n    }), _jsxs(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisibleScanner,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisibleScanner(!modalVisibleScanner);\n        setModalVisibleScanner(false);\n        setHasPermission(null);\n        setScanned(false);\n      },\n      children: [_jsxs(View, {\n        style: styles.modalView,\n        children: [_jsx(BarCodeScanner, {\n          onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n          style: StyleSheet.absoluteFillObject\n        }), scanned && _jsx(Button, {\n          title: 'Tap to Scan Again',\n          onPress: function onPress() {\n            return setScanned(false);\n          }\n        })]\n      }), _jsx(Button, {\n        title: \"close\",\n        onPress: function onPress() {\n          setModalVisibleScanner(false);\n          setHasPermission(null);\n          setScanned(false);\n        }\n      })]\n    }), _jsx(Button, {\n      title: \"Generate my QR code\",\n      onPress: function onPress() {\n        return generateQRCode();\n      }\n    }), _jsx(Button, {\n      title: \"Scan a QR code\",\n      onPress: function onPress() {\n        return scanQRCode();\n      }\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  modalView: {\n    margin: 20,\n    marginTop: 250,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: '10%',\n    height: 400,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  }\n});\nexport default Home;","map":{"version":3,"sources":["C:/Users/Areeba/Desktop/2022/pf-components/BarcodeRelationship/BarcodeRS/lib/Home.js"],"names":["React","useEffect","useState","StatusBar","BarCodeScanner","Home","route","navigation","url","formContentType","apiCall","op","method","params","console","log","fetch","then","response","text","catch","error","imageUrl","img","setImg","qrInput","setQRInput","modalVisible","setModalVisible","modalVisibleScanner","setModalVisibleScanner","hasPermission","setHasPermission","scanned","setScanned","fetchImage","res","blob","imageBlob","imageObjectURL","URL","createObjectURL","scanQRCode","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","generateQRCode","sid","parametersJson","parameters","size","backgroundColor","qrColor","padding","img_resp","styles","container","Alert","modalView","width","height","uri","undefined","StyleSheet","absoluteFillObject","create","flex","justifyContent","alignItems","margin","marginTop","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { Modal, Image, TextInput, Button, StyleSheet, Text, View } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n\r\nfunction Home ({ route, navigation }) {\r\n  const url='http://192.168.1.214:3001';  \r\n  const formContentType = \"application/x-www-form-urlencoded;charset=UTF-8\";\r\n  const apiCall = (op, method = '', params = {}) => {\r\n    if (method != '')\r\n        params.method = method;\r\n    console.log('apiCall '+method+' '+ url+'/'+op);\r\n    fetch(url + '/'+op, params)\r\n        .then((response) => response.text())\r\n        .catch((error) => {\r\n            console.error(error);\r\n        });\r\n}\r\n\r\n  // display QR CODE\r\n  const imageUrl = \"https://i.imgur.com/fHyEMsl.jpg\";\r\n  const [img, setImg] = useState();\r\n  const [qrInput, setQRInput] = useState(\"null\");\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalVisibleScanner, setModalVisibleScanner] = useState(false);\r\n\r\n  // scan qr code\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  const fetchImage = async () => {\r\n    const res = await fetch(imageUrl);\r\n    const imageBlob = await res.blob();\r\n    const imageObjectURL = URL.createObjectURL(imageBlob);\r\n    setImg(imageObjectURL);\r\n  };\r\n\r\n\r\n  const scanQRCode = async () =>  {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n    setModalVisibleScanner(true);\r\n  }\r\n\r\n  const handleBarCodeScanned = async ({ type, data }) => {\r\n    setScanned(true);\r\n\r\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n    //\" would you like ot send request to user: NAME\"\r\n    // yes, no\r\n    \r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    fetchImage();\r\n  }, []);\r\n\r\n  const generateQRCode = async () => {\r\n    const { sid } = route.params;\r\n    console.log(\"recieved sid: \" + sid)\r\n    var parametersJson = {\r\n      \"size\": 250,\r\n      \"backgroundColor\": \"38-38-38\", \r\n      \"qrColor\": \"255-255-255\", \r\n      \"padding\": 2, \r\n      \"data\": `${imageUrl}`\r\n    };\r\n\r\n    parametersJson.data = sid;\r\n    var parameters = `size=${parametersJson.size}&bgcolor=${parametersJson.backgroundColor}&color=${parametersJson.qrColor}&qzone=${parametersJson.padding}&data=${parametersJson.data}` // Stitch Together all Paramenters\r\n    var img_resp = `https://api.qrserver.com/v1/create-qr-code/?${parameters}` // Set Image URL To Link\r\n    await setQRInput(img_resp);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisible}\r\n        onRequestClose={() => {\r\n          Alert.alert(\"Modal has been closed.\");\r\n          setModalVisible(!modalVisible);\r\n        }} >\r\n          <View style={styles.modalView}>\r\n            <Image\r\n              style={{width: '100%', height: '100%'}}\r\n              source={{uri:qrInput}}/>\r\n          </View>\r\n          <Button title='close' onPress={() => setModalVisible(false)}/>\r\n      </Modal>\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisibleScanner}\r\n        onRequestClose={() => {\r\n          Alert.alert(\"Modal has been closed.\");\r\n          setModalVisibleScanner(!modalVisibleScanner);\r\n          setModalVisibleScanner(false);\r\n            setHasPermission(null);\r\n            setScanned(false);\r\n        }} >\r\n          <View style={styles.modalView}>\r\n            <BarCodeScanner\r\n                onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n                style={StyleSheet.absoluteFillObject}\r\n              />\r\n            {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n          </View>\r\n          <Button title='close' onPress={() => {\r\n            setModalVisibleScanner(false);\r\n            setHasPermission(null);\r\n            setScanned(false);\r\n            }}/>\r\n      </Modal>\r\n\r\n      <Button title='Generate my QR code' onPress={()=> generateQRCode()}/>\r\n      <Button title='Scan a QR code' onPress={()=> scanQRCode()}/>\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    // paddingTop: 100,\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    marginTop: 250,\r\n    backgroundColor: \"white\",\r\n    borderRadius: 20,\r\n    padding: '10%',\r\n    height: 400,\r\n    alignItems: \"center\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 4,\r\n    elevation: 5\r\n  },\r\n\r\n});\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}